-- MySQL Script generated by MySQL Workbench
-- seg 10 mai 2021 14:48:04
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ifoverflow
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ifoverflow
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ifoverflow` DEFAULT CHARACTER SET utf8 ;
USE `ifoverflow` ;

-- -----------------------------------------------------
-- Table `ifoverflow`.`Categorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Categorias` (
  `id_categoria` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`id_categoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`UF`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`UF` (
  `id_uf` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`id_uf`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Campus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Campus` (
  `id_campus` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  `UF_id_uf` INT NOT NULL,
  PRIMARY KEY (`id_campus`, `UF_id_uf`),
  INDEX `fk_Campus_UF1_idx` (`UF_id_uf` ASC) VISIBLE,
  CONSTRAINT `fk_Campus_UF1`
    FOREIGN KEY (`UF_id_uf`)
    REFERENCES `ifoverflow`.`UF` (`id_uf`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Classes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Classes` (
  `id_classe` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  `descricao` TEXT NOT NULL,
  `limite` INT NOT NULL,
  PRIMARY KEY (`id_classe`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Usuarios` (
  `id_usuario` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  `votos` INT NOT NULL DEFAULT 0,
  `avatar` VARCHAR(200) NOT NULL,
  `email` VARCHAR(200) NOT NULL,
  `senha` VARCHAR(200) NOT NULL,
  `Campus_id_campus` INT NOT NULL,
  `Classe_id_classe` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_usuario`, `Campus_id_campus`, `Classe_id_classe`),
  INDEX `fk_Usuarios_Campus1_idx` (`Campus_id_campus` ASC) VISIBLE,
  INDEX `fk_Usuarios_Classe1_idx` (`Classe_id_classe` ASC) VISIBLE,
  CONSTRAINT `fk_Usuarios_Campus1`
    FOREIGN KEY (`Campus_id_campus`)
    REFERENCES `ifoverflow`.`Campus` (`id_campus`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Usuarios_Classe1`
    FOREIGN KEY (`Classe_id_classe`)
    REFERENCES `ifoverflow`.`Classes` (`id_classe`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Perguntas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Perguntas` (
  `id_pergunta` INT NOT NULL AUTO_INCREMENT,
  `assunto` VARCHAR(100) NOT NULL,
  `descricao` TEXT(1000) NOT NULL,
  `votos` INT NOT NULL DEFAULT 0,
  `Categorias_id_categoria` INT NOT NULL,
  `Usuarios_id_usuario` INT NOT NULL,
  PRIMARY KEY (`id_pergunta`, `Categorias_id_categoria`, `Usuarios_id_usuario`),
  INDEX `fk_Perguntas_Categorias2_idx` (`Categorias_id_categoria` ASC) VISIBLE,
  INDEX `fk_Perguntas_Usuarios1_idx` (`Usuarios_id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_Perguntas_Categorias2`
    FOREIGN KEY (`Categorias_id_categoria`)
    REFERENCES `ifoverflow`.`Categorias` (`id_categoria`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Perguntas_Usuarios1`
    FOREIGN KEY (`Usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`Usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Respostas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Respostas` (
  `id_resposta` INT NOT NULL AUTO_INCREMENT,
  `descricao` TEXT(1000) NOT NULL,
  `votos` INT NOT NULL DEFAULT 0,
  `aceita` TINYINT NOT NULL DEFAULT 0,
  `Usuarios_id_usuario` INT NOT NULL,
  `Perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`id_resposta`, `Usuarios_id_usuario`, `Perguntas_id_pergunta`),
  INDEX `fk_Respostas_Usuarios1_idx` (`Usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_Respostas_Perguntas1_idx` (`Perguntas_id_pergunta` ASC) VISIBLE,
  CONSTRAINT `fk_Respostas_Usuarios1`
    FOREIGN KEY (`Usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`Usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Respostas_Perguntas1`
    FOREIGN KEY (`Perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`Perguntas` (`id_pergunta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Tags` (
  `id_tag` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`id_tag`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Tags_Perguntas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Tags_Perguntas` (
  `Tags_id_tag` INT NOT NULL,
  `Perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`Tags_id_tag`, `Perguntas_id_pergunta`),
  INDEX `fk_Tags_has_Perguntas_Perguntas1_idx` (`Perguntas_id_pergunta` ASC) VISIBLE,
  INDEX `fk_Tags_has_Perguntas_Tags1_idx` (`Tags_id_tag` ASC) VISIBLE,
  CONSTRAINT `fk_Tags_has_Perguntas_Tags1`
    FOREIGN KEY (`Tags_id_tag`)
    REFERENCES `ifoverflow`.`Tags` (`id_tag`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Tags_has_Perguntas_Perguntas1`
    FOREIGN KEY (`Perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`Perguntas` (`id_pergunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Comentarios_Pergunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Comentarios_Pergunta` (
  `id_comentarios_pergunta` INT NOT NULL AUTO_INCREMENT,
  `descricao` TEXT(1000) NOT NULL,
  `Usuarios_id_usuario` INT NOT NULL,
  `Perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`id_comentarios_pergunta`, `Usuarios_id_usuario`, `Perguntas_id_pergunta`),
  INDEX `fk_Comentarios_Pergunta_Usuarios1_idx` (`Usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_Comentarios_Pergunta_Perguntas1_idx` (`Perguntas_id_pergunta` ASC) VISIBLE,
  CONSTRAINT `fk_Comentarios_Pergunta_Usuarios1`
    FOREIGN KEY (`Usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`Usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Comentarios_Pergunta_Perguntas1`
    FOREIGN KEY (`Perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`Perguntas` (`id_pergunta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Comentarios_Resposta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Comentarios_Resposta` (
  `id_comentarios_resposta` INT NOT NULL AUTO_INCREMENT,
  `descricao` TEXT(1000) NOT NULL,
  `Usuarios_id_usuario` INT NOT NULL,
  `Respostas_id_resposta` INT NOT NULL,
  PRIMARY KEY (`id_comentarios_resposta`, `Usuarios_id_usuario`, `Respostas_id_resposta`),
  INDEX `fk_Comentarios_Resposta_Usuarios1_idx` (`Usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_Comentarios_Resposta_Respostas1_idx` (`Respostas_id_resposta` ASC) VISIBLE,
  CONSTRAINT `fk_Comentarios_Resposta_Usuarios1`
    FOREIGN KEY (`Usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`Usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Comentarios_Resposta_Respostas1`
    FOREIGN KEY (`Respostas_id_resposta`)
    REFERENCES `ifoverflow`.`Respostas` (`id_resposta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Votos_Resposta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Votos_Resposta` (
  `id_votos_resposta` INT NOT NULL AUTO_INCREMENT,
  `voto` TINYINT NOT NULL,
  `Usuarios_id_usuario` INT NOT NULL,
  `Respostas_id_resposta` INT NOT NULL,
  PRIMARY KEY (`id_votos_resposta`, `Usuarios_id_usuario`, `Respostas_id_resposta`),
  INDEX `fk_Votos_Resposta_Usuarios1_idx` (`Usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_Votos_Resposta_Respostas1_idx` (`Respostas_id_resposta` ASC) VISIBLE,
  CONSTRAINT `fk_Votos_Resposta_Usuarios1`
    FOREIGN KEY (`Usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`Usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Votos_Resposta_Respostas1`
    FOREIGN KEY (`Respostas_id_resposta`)
    REFERENCES `ifoverflow`.`Respostas` (`id_resposta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`Votos_Pergunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`Votos_Pergunta` (
  `id_votos_pergunta` INT NOT NULL AUTO_INCREMENT,
  `voto` TINYINT NOT NULL,
  `Usuarios_id_usuario` INT NOT NULL,
  `Perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`id_votos_pergunta`, `Usuarios_id_usuario`, `Perguntas_id_pergunta`),
  INDEX `fk_Votos_Resposta_Usuarios1_idx` (`Usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_Votos_Pergunta_Perguntas1_idx` (`Perguntas_id_pergunta` ASC) VISIBLE,
  CONSTRAINT `fk_Votos_Resposta_Usuarios10`
    FOREIGN KEY (`Usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`Usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Votos_Pergunta_Perguntas1`
    FOREIGN KEY (`Perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`Perguntas` (`id_pergunta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- REGRAS

-- RF 01 ------------------------------
DELIMITER $$
CREATE PROCEDURE cadastrarUsuario (nome VARCHAR(80), avatar VARCHAR(200), email VARCHAR(200), senha VARCHAR(200), Campus_id_campus INT)
BEGIN

  -- CRIO USUÁRIO
  INSERT INTO usuarios (nome,avatar,email,senha,Campus_id_campus) 
  VALUES (nome,avatar,email,senha,Campus_id_campus);

END $$
DELIMITER ;

-- RF 02 ------------------------------
DELIMITER $$
CREATE PROCEDURE perguntar (assunto VARCHAR(100), descricao TEXT(1000), Categorias_id_categoria INT, Usuarios_id_usuario INT)
BEGIN

INSERT INTO perguntas (assunto,descricao,Categorias_id_categoria,Usuarios_id_usuario)
VALUES (assunto,descricao,Categorias_id_categoria,Usuarios_id_usuario);

END $$
DELIMITER ;

-- RF 03 ------------------------------
DELIMITER $$
CREATE PROCEDURE responder (descricao TEXT(1000), Usuarios_id_usuario INT, Perguntas_id_pergunta INT)
BEGIN

  -- CRIO RESPOSTA
  INSERT INTO respostas (descricao, Usuarios_id_usuario, Perguntas_id_pergunta)
  VALUES (descricao, Usuarios_id_usuario, Perguntas_id_pergunta);

END $$
DELIMITER ;

-- RF 04 ------------------------------

-- RF 04 - Resposta
DELIMITER $$
CREATE PROCEDURE comentarResposta (descricao TEXT(1000), Usuarios_id_usuario INT, Respostas_id_resposta INT)
BEGIN

  -- CRIO COMENTÁRIO
  INSERT INTO comentarios_resposta (descricao, Usuarios_id_usuario, Respostas_id_resposta)
  VALUES (descricao, Usuarios_id_usuario, Respostas_id_resposta);

END $$
DELIMITER ;

-- RF 04 - Pergunta
DELIMITER $$
CREATE PROCEDURE comentarPergunta (descricao TEXT(1000), Usuarios_id_usuario INT, Perguntas_id_pergunta INT)
BEGIN

  -- CRIO COMENTÁRIO
  INSERT INTO comentarios_pergunta (descricao, Usuarios_id_usuario, Perguntas_id_pergunta)
  VALUES (descricao, Usuarios_id_usuario, Perguntas_id_pergunta);

END $$
DELIMITER ;

-- RF 05 ------------------------------
SET GLOBAL log_bin_trust_function_creators = 1;
-- FUNÇÕES PARA LOCALIZAR O USUÁRIO
-- LOCALIZAR DONO DA RESPOSTA
CREATE FUNCTION donoDaResposta(id_resposta INT)  
RETURNS INT
RETURN (SELECT respostas.Usuarios_id_usuario 
FROM respostas 
WHERE respostas.id_resposta = id_resposta);


-- RF 05 - Resposta
DELIMITER $$
CREATE PROCEDURE votarNaResposta (id_usuario INT, id_resposta INT, voto INT)
BEGIN

DECLARE `_rollback` BOOL DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;

START TRANSACTION;
  -- LOCALIZO O DO DONO DA RESPOSTA
  SELECT donoDaResposta(id_resposta)
  INTO @id_usuario_dono;
  -- ATUALIZO O VOTO DO DONO DA RESPOSTA
  UPDATE usuarios SET usuarios.votos = usuarios.votos + voto WHERE usuarios.id_usuario = @id_usuario_dono;
  -- ATUALIZO O VOTO DA RESPOSTA
  UPDATE respostas SET respostas.votos = respostas.votos + voto WHERE respostas.id_resposta = id_resposta;
  -- REGISTRAR VOTO
  INSERT INTO votos_resposta (voto, Usuarios_id_usuario, Respostas_id_resposta)
  VALUES (voto, id_usuario, id_resposta);

IF `_rollback` THEN
    ROLLBACK;
ELSE
    COMMIT;
END IF;

END $$
DELIMITER ;

-- RF 05 ------------------------------
SET GLOBAL log_bin_trust_function_creators = 1;
-- FUNÇÕES PARA LOCALIZAR O USUÁRIO
-- LOCALIZAR DONO DA PERGUNTA
CREATE FUNCTION donoDaPergunta(id_pergunta INT)  
RETURNS INT
RETURN (SELECT perguntas.Usuarios_id_usuario 
FROM perguntas 
WHERE perguntas.id_pergunta = id_pergunta);

-- RF 05 - 
DELIMITER $$
CREATE PROCEDURE votarNaPergunta (id_usuario INT, id_pergunta INT, voto INT)
BEGIN

DECLARE `_rollback` BOOL DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;

START TRANSACTION;
  -- LOCALIZO O DO DONO DA PERGUNTA
  SELECT donoDaPergunta(id_pergunta)
  INTO @id_usuario_dono;
  -- ATUALIZO O VOTO DO DONO DA PERGUNTA
  UPDATE usuarios SET usuarios.votos = usuarios.votos + voto WHERE usuarios.id_usuario = @id_usuario_dono;
  -- ATUALIZO O VOTO DA PERGUNTA
  UPDATE perguntas SET perguntas.votos = perguntas.votos + voto WHERE perguntas.id_pergunta = id_pergunta;
  -- REGISTRAR VOTO
  INSERT INTO votos_pergunta (voto, Usuarios_id_usuario, Perguntas_id_pergunta)
  VALUES (voto, id_usuario, id_pergunta);

IF `_rollback` THEN
    ROLLBACK;
ELSE
    COMMIT;
END IF;

END $$
DELIMITER ;

-- RF 07 ------------------------------
SET GLOBAL log_bin_trust_function_creators = 1;
-- RF 07
CREATE FUNCTION usuarioFoiClassificado(id_usuario INT)  
RETURNS INT

RETURN IFNULL((SELECT classes.id_classe 
  FROM usuarios, classes 
  WHERE usuarios.id_usuario = id_usuario
  AND classes.limite = usuarios.votos), 0);

-- RF 07 - Trigger Resposta

DELIMITER $$
CREATE TRIGGER tr_votosResposta AFTER UPDATE  
ON respostas  
FOR EACH ROW
BEGIN
  SET @id_classe = usuarioFoiClassificado(NEW.Usuarios_id_usuario);

  IF @id_classe > 0 THEN 
    UPDATE usuarios SET usuarios.Classe_id_classe = @id_classe 
    WHERE usuarios.id_usuario = NEW.Usuarios_id_usuario;
  END IF;
END$$
DELIMITER ;

-- RF 07 - Trigger Pergunta

DELIMITER $$
CREATE TRIGGER tr_votosPergunta AFTER UPDATE  
ON perguntas  
FOR EACH ROW
BEGIN
  SET @id_classe = usuarioFoiClassificado(NEW.Usuarios_id_usuario);

  IF @id_classe > 0 THEN 
    UPDATE usuarios SET usuarios.Classe_id_classe = @id_classe 
    WHERE usuarios.id_usuario = NEW.Usuarios_id_usuario;
  END IF;
END$$
DELIMITER ;

-- RF 08 ------------------------------
DELIMITER $$
CREATE PROCEDURE atualizarParaMelhorResposta (id_resposta INT)
BEGIN
  UPDATE respostas SET respostas.aceita = 1 
  WHERE respostas.id_resposta = id_resposta;
END $$
DELIMITER ;
