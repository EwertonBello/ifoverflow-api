-- MySQL Script generated by MySQL Workbench
-- seg 10 mai 2021 14:48:04
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ifoverflow
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ifoverflow
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ifoverflow` DEFAULT CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci;
USE `ifoverflow` ;

-- -----------------------------------------------------
-- Table `ifoverflow`.`categorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`categorias` (
  `id_categoria` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL COLLATE utf8mb3_general_ci,
  PRIMARY KEY (`id_categoria`))
ENGINE = InnoDB CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci;


-- -----------------------------------------------------
-- Table `ifoverflow`.`UF`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`UF` (
  `id_uf` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`id_uf`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`campus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`campus` (
  `id_campus` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  `UF_id_uf` INT NOT NULL,
  PRIMARY KEY (`id_campus`, `UF_id_uf`),
  INDEX `fk_campus_UF1_idx` (`UF_id_uf` ASC) VISIBLE,
  CONSTRAINT `fk_campus_UF1`
    FOREIGN KEY (`UF_id_uf`)
    REFERENCES `ifoverflow`.`UF` (`id_uf`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`classes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`classes` (
  `id_classe` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  `descricao` TEXT NOT NULL,
  `limite` INT NOT NULL,
  PRIMARY KEY (`id_classe`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`usuarios` (
  `id_usuario` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  `votos` INT NOT NULL DEFAULT 0,
  `avatar` VARCHAR(200) NOT NULL,
  `email` VARCHAR(200) NOT NULL,
  `senha` VARCHAR(200) NOT NULL,
  `campus_id_campus` INT NOT NULL,
  `Classe_id_classe` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_usuario`, `campus_id_campus`, `Classe_id_classe`),
  INDEX `fk_usuarios_campus1_idx` (`campus_id_campus` ASC) VISIBLE,
  INDEX `fk_usuarios_Classe1_idx` (`Classe_id_classe` ASC) VISIBLE,
  CONSTRAINT `fk_usuarios_campus1`
    FOREIGN KEY (`campus_id_campus`)
    REFERENCES `ifoverflow`.`campus` (`id_campus`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_usuarios_Classe1`
    FOREIGN KEY (`Classe_id_classe`)
    REFERENCES `ifoverflow`.`classes` (`id_classe`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`perguntas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`perguntas` (
  `id_pergunta` INT NOT NULL AUTO_INCREMENT,
  `assunto` VARCHAR(100) NOT NULL,
  `descricao` TEXT(1000) NOT NULL,
  `votos` INT NOT NULL DEFAULT 0,
  `categorias_id_categoria` INT NOT NULL,
  `usuarios_id_usuario` INT NOT NULL,
  PRIMARY KEY (`id_pergunta`, `categorias_id_categoria`, `usuarios_id_usuario`),
  INDEX `fk_perguntas_categorias2_idx` (`categorias_id_categoria` ASC) VISIBLE,
  INDEX `fk_perguntas_usuarios1_idx` (`usuarios_id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_perguntas_categorias2`
    FOREIGN KEY (`categorias_id_categoria`)
    REFERENCES `ifoverflow`.`categorias` (`id_categoria`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_perguntas_usuarios1`
    FOREIGN KEY (`usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`respostas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`respostas` (
  `id_resposta` INT NOT NULL AUTO_INCREMENT,
  `descricao` TEXT(1000) NOT NULL,
  `votos` INT NOT NULL DEFAULT 0,
  `aceita` TINYINT NOT NULL DEFAULT 0,
  `usuarios_id_usuario` INT NOT NULL,
  `perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`id_resposta`, `usuarios_id_usuario`, `perguntas_id_pergunta`),
  INDEX `fk_respostas_usuarios1_idx` (`usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_respostas_perguntas1_idx` (`perguntas_id_pergunta` ASC) VISIBLE,
  CONSTRAINT `fk_respostas_usuarios1`
    FOREIGN KEY (`usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_respostas_perguntas1`
    FOREIGN KEY (`perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`perguntas` (`id_pergunta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`tags` (
  `id_tag` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`id_tag`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`tags_perguntas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`tags_perguntas` (
  `tags_id_tag` INT NOT NULL,
  `perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`tags_id_tag`, `perguntas_id_pergunta`),
  INDEX `fk_tags_has_perguntas_perguntas1_idx` (`perguntas_id_pergunta` ASC) VISIBLE,
  INDEX `fk_tags_has_perguntas_tags1_idx` (`tags_id_tag` ASC) VISIBLE,
  CONSTRAINT `fk_tags_has_perguntas_tags1`
    FOREIGN KEY (`tags_id_tag`)
    REFERENCES `ifoverflow`.`tags` (`id_tag`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tags_has_perguntas_perguntas1`
    FOREIGN KEY (`perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`perguntas` (`id_pergunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`comentarios_pergunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`comentarios_pergunta` (
  `id_comentarios_pergunta` INT NOT NULL AUTO_INCREMENT,
  `descricao` TEXT(1000) NOT NULL,
  `usuarios_id_usuario` INT NOT NULL,
  `perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`id_comentarios_pergunta`, `usuarios_id_usuario`, `perguntas_id_pergunta`),
  INDEX `fk_comentarios_pergunta_usuarios1_idx` (`usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_comentarios_pergunta_perguntas1_idx` (`perguntas_id_pergunta` ASC) VISIBLE,
  CONSTRAINT `fk_comentarios_pergunta_usuarios1`
    FOREIGN KEY (`usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_comentarios_pergunta_perguntas1`
    FOREIGN KEY (`perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`perguntas` (`id_pergunta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`comentarios_resposta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`comentarios_resposta` (
  `id_comentarios_resposta` INT NOT NULL AUTO_INCREMENT,
  `descricao` TEXT(1000) NOT NULL,
  `usuarios_id_usuario` INT NOT NULL,
  `respostas_id_resposta` INT NOT NULL,
  PRIMARY KEY (`id_comentarios_resposta`, `usuarios_id_usuario`, `respostas_id_resposta`),
  INDEX `fk_comentarios_resposta_usuarios1_idx` (`usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_comentarios_resposta_respostas1_idx` (`respostas_id_resposta` ASC) VISIBLE,
  CONSTRAINT `fk_comentarios_resposta_usuarios1`
    FOREIGN KEY (`usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_comentarios_resposta_respostas1`
    FOREIGN KEY (`respostas_id_resposta`)
    REFERENCES `ifoverflow`.`respostas` (`id_resposta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`votos_resposta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`votos_resposta` (
  `id_votos_resposta` INT NOT NULL AUTO_INCREMENT,
  `voto` TINYINT NOT NULL,
  `usuarios_id_usuario` INT NOT NULL,
  `respostas_id_resposta` INT NOT NULL,
  PRIMARY KEY (`id_votos_resposta`, `usuarios_id_usuario`, `respostas_id_resposta`),
  INDEX `fk_votos_resposta_usuarios1_idx` (`usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_votos_resposta_respostas1_idx` (`respostas_id_resposta` ASC) VISIBLE,
  CONSTRAINT `fk_votos_resposta_usuarios1`
    FOREIGN KEY (`usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_votos_resposta_respostas1`
    FOREIGN KEY (`respostas_id_resposta`)
    REFERENCES `ifoverflow`.`respostas` (`id_resposta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ifoverflow`.`votos_pergunta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ifoverflow`.`votos_pergunta` (
  `id_votos_pergunta` INT NOT NULL AUTO_INCREMENT,
  `voto` TINYINT NOT NULL,
  `usuarios_id_usuario` INT NOT NULL,
  `perguntas_id_pergunta` INT NOT NULL,
  PRIMARY KEY (`id_votos_pergunta`, `usuarios_id_usuario`, `perguntas_id_pergunta`),
  INDEX `fk_votos_resposta_usuarios1_idx` (`usuarios_id_usuario` ASC) VISIBLE,
  INDEX `fk_votos_pergunta_perguntas1_idx` (`perguntas_id_pergunta` ASC) VISIBLE,
  CONSTRAINT `fk_votos_resposta_usuarios10`
    FOREIGN KEY (`usuarios_id_usuario`)
    REFERENCES `ifoverflow`.`usuarios` (`id_usuario`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_votos_pergunta_perguntas1`
    FOREIGN KEY (`perguntas_id_pergunta`)
    REFERENCES `ifoverflow`.`perguntas` (`id_pergunta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- REGRAS

-- RF 01 ------------------------------
DELIMITER $$
CREATE PROCEDURE cadastrarUsuario (nome VARCHAR(80), avatar VARCHAR(200), email VARCHAR(200), senha VARCHAR(200), Campus_id_campus INT)
BEGIN

  -- CRIO USUÁRIO
  INSERT INTO usuarios (nome,avatar,email,senha,Campus_id_campus) 
  VALUES (nome,avatar,email,senha,Campus_id_campus);

END $$
DELIMITER ;

-- RF 02 ------------------------------
DELIMITER $$
CREATE PROCEDURE perguntar (assunto VARCHAR(100), descricao TEXT(1000), Categorias_id_categoria INT, Usuarios_id_usuario INT)
BEGIN

INSERT INTO perguntas (assunto,descricao,Categorias_id_categoria,Usuarios_id_usuario)
VALUES (assunto,descricao,Categorias_id_categoria,Usuarios_id_usuario);

END $$
DELIMITER ;

-- RF 03 ------------------------------
DELIMITER $$
CREATE PROCEDURE responder (descricao TEXT(1000), Usuarios_id_usuario INT, Perguntas_id_pergunta INT)
BEGIN

  -- CRIO RESPOSTA
  INSERT INTO respostas (descricao, Usuarios_id_usuario, Perguntas_id_pergunta)
  VALUES (descricao, Usuarios_id_usuario, Perguntas_id_pergunta);

END $$
DELIMITER ;

-- RF 04 ------------------------------

-- RF 04 - Resposta
DELIMITER $$
CREATE PROCEDURE comentarResposta (descricao TEXT(1000), Usuarios_id_usuario INT, Respostas_id_resposta INT)
BEGIN

  -- CRIO COMENTÁRIO
  INSERT INTO comentarios_resposta (descricao, Usuarios_id_usuario, Respostas_id_resposta)
  VALUES (descricao, Usuarios_id_usuario, Respostas_id_resposta);

END $$
DELIMITER ;

-- RF 04 - Pergunta
DELIMITER $$
CREATE PROCEDURE comentarPergunta (descricao TEXT(1000), Usuarios_id_usuario INT, Perguntas_id_pergunta INT)
BEGIN

  -- CRIO COMENTÁRIO
  INSERT INTO comentarios_pergunta (descricao, Usuarios_id_usuario, Perguntas_id_pergunta)
  VALUES (descricao, Usuarios_id_usuario, Perguntas_id_pergunta);

END $$
DELIMITER ;

-- RF 05 ------------------------------
SET GLOBAL log_bin_trust_function_creators = 1;
-- FUNÇÕES PARA LOCALIZAR O USUÁRIO
-- LOCALIZAR DONO DA RESPOSTA
CREATE FUNCTION donoDaResposta(id_resposta INT)  
RETURNS INT
RETURN (SELECT respostas.Usuarios_id_usuario 
FROM respostas 
WHERE respostas.id_resposta = id_resposta);


-- RF 05 - Resposta
DELIMITER $$
CREATE PROCEDURE votarNaResposta (id_usuario INT, id_resposta INT, voto INT)
BEGIN

DECLARE `_rollback` BOOL DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;

START TRANSACTION;
  -- LOCALIZO O DO DONO DA RESPOSTA
  SELECT donoDaResposta(id_resposta)
  INTO @id_usuario_dono;
  -- ATUALIZO O VOTO DO DONO DA RESPOSTA
  UPDATE usuarios SET usuarios.votos = usuarios.votos + voto WHERE usuarios.id_usuario = @id_usuario_dono;
  -- ATUALIZO O VOTO DA RESPOSTA
  UPDATE respostas SET respostas.votos = respostas.votos + voto WHERE respostas.id_resposta = id_resposta;
  -- REGISTRAR VOTO
  INSERT INTO votos_resposta (voto, Usuarios_id_usuario, Respostas_id_resposta)
  VALUES (voto, id_usuario, id_resposta);

IF `_rollback` THEN
    ROLLBACK;
ELSE
    COMMIT;
END IF;

END $$
DELIMITER ;

-- RF 05 ------------------------------
SET GLOBAL log_bin_trust_function_creators = 1;
-- FUNÇÕES PARA LOCALIZAR O USUÁRIO
-- LOCALIZAR DONO DA PERGUNTA
CREATE FUNCTION donoDaPergunta(id_pergunta INT)  
RETURNS INT
RETURN (SELECT perguntas.Usuarios_id_usuario 
FROM perguntas 
WHERE perguntas.id_pergunta = id_pergunta);

-- RF 05 - 
DELIMITER $$
CREATE PROCEDURE votarNaPergunta (id_usuario INT, id_pergunta INT, voto INT)
BEGIN

DECLARE `_rollback` BOOL DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;

START TRANSACTION;
  -- LOCALIZO O DO DONO DA PERGUNTA
  SELECT donoDaPergunta(id_pergunta)
  INTO @id_usuario_dono;
  -- ATUALIZO O VOTO DO DONO DA PERGUNTA
  UPDATE usuarios SET usuarios.votos = usuarios.votos + voto WHERE usuarios.id_usuario = @id_usuario_dono;
  -- ATUALIZO O VOTO DA PERGUNTA
  UPDATE perguntas SET perguntas.votos = perguntas.votos + voto WHERE perguntas.id_pergunta = id_pergunta;
  -- REGISTRAR VOTO
  INSERT INTO votos_pergunta (voto, Usuarios_id_usuario, Perguntas_id_pergunta)
  VALUES (voto, id_usuario, id_pergunta);

IF `_rollback` THEN
    ROLLBACK;
ELSE
    COMMIT;
END IF;

END $$
DELIMITER ;

-- RF 07 ------------------------------
SET GLOBAL log_bin_trust_function_creators = 1;
-- RF 07
CREATE FUNCTION usuarioFoiClassificado(id_usuario INT)  
RETURNS INT

RETURN IFNULL((SELECT classes.id_classe 
  FROM usuarios, classes 
  WHERE usuarios.id_usuario = id_usuario
  AND classes.limite = usuarios.votos), 0);

-- RF 07 - Trigger Resposta

DELIMITER $$
CREATE TRIGGER tr_votosResposta AFTER UPDATE  
ON respostas  
FOR EACH ROW
BEGIN
  SET @id_classe = usuarioFoiClassificado(NEW.Usuarios_id_usuario);

  IF @id_classe > 0 THEN 
    UPDATE usuarios SET usuarios.Classe_id_classe = @id_classe 
    WHERE usuarios.id_usuario = NEW.Usuarios_id_usuario;
  END IF;
END$$
DELIMITER ;

-- RF 07 - Trigger Pergunta

DELIMITER $$
CREATE TRIGGER tr_votosPergunta AFTER UPDATE  
ON perguntas  
FOR EACH ROW
BEGIN
  SET @id_classe = usuarioFoiClassificado(NEW.Usuarios_id_usuario);

  IF @id_classe > 0 THEN 
    UPDATE usuarios SET usuarios.Classe_id_classe = @id_classe 
    WHERE usuarios.id_usuario = NEW.Usuarios_id_usuario;
  END IF;
END$$
DELIMITER ;

-- RF 08 ------------------------------
DELIMITER $$
CREATE PROCEDURE atualizarParaMelhorResposta (id_resposta INT)
BEGIN
  UPDATE respostas SET respostas.aceita = 1 
  WHERE respostas.id_resposta = id_resposta;
END $$
DELIMITER ;


-- POPULAR TABELAS

INSERT INTO UF(nome)
VALUES
('AC'),('AL'),('AP'),('AM'),('BA'),
('CE'),('ES'),('GO'),('MA'),('MT'),
('MS'),('MG'),('PA'),('PB'),('PR'),
('PE'),('PI'),('RJ'),('RN'),('RS'),
('RO'),('RR'),('SC'),('SP'),('SE'),
('TO'),('DF');

INSERT INTO campus(nome, UF_id_uf)
VALUES
('Abaetetuba', 13),('Araraquara', 24),
('Altamira', 13),('Avançado Fernandópolis', 24),
('Ananindeua', 13),('Avançado Ilha Solteira', 24),
('Belém', 13),('Avançado Jundiaí', 24),
('Bragança', 13),('Avançado São Miguel Paulista', 24),
('Breves', 13),('Avançado Tupã', 24),
('Cametá', 13),('Avaré', 24),
('Castanhal', 13),('Barretos', 24),
('Itaituba', 13),('Birigui', 24),
('Conceição Araguaia', 13),('Bragança Paulista', 24),
('Marabá Industrial', 13),('Campinas', 24),
('Rural Marabá', 13),('Campos do Jordão', 24),
('Óbidos', 13),('Caraguatatuba', 24),
('Paragominas', 13),('Catanduva', 24),
('Parauapebas', 13),('Cubatão', 24),
('Santarém', 13),('Guarulhos', 24),
('Tucuruí', 13),('Hortolândia', 24),
('Vigia', 13),('Itapetininga', 24),
('Itaquaquecetuba', 24),
('Jacarei', 24),
('Matão', 24),
('Piracicaba', 24),
('Pirituba', 24),
('Presidente Epitácio', 24),
('Registro', 24),
('Salto', 24),
('São Carlos', 24),
('São João da Boa Vista', 24),
('São José dos Campos', 24),
('São Paulo', 24),
('São Roque', 24),
('Sertãozinho', 24),
('Sorocaba', 24),
('Suzano', 24),
('Votuporanga', 24);

INSERT INTO classes(nome,descricao,limite) 
VALUES
('Novato','Classe inicial',0),
('Curioso','Quando alcança 10 votos',10),
('Estudante','Quando alcança 20 votos',20),
('Entusiasta','Quando alcança 30 votos',30),
('Nerd','Quando alcança 40 votos',40),
('Professor','Quando alcança 50 votos',50),
('Especialista','Quando alcança 60 votos',60),
('Sábio','Quando alcança 70 votos',70),
('Mestre','Quando alcança 80 votos',80),
('Doutor','Quando alcança 90 votos',90),
('God','Quando alcança 100 votos',100);

INSERT INTO usuarios(nome,avatar,email,senha,Campus_id_campus) 
VALUES
('Steve Wozniak', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'steve@ifoverflow.com','secret',1),
('Bill Gates', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'bill@ifoverflow.com','secret',2),
('Paul Allen', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'paul@ifoverflow.com','secret',3),
('Linus Torvalds', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'linus@ifoverflow.com','secret',4),
('Steve Jobs', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'steve@ifoverflow.com','secret',5),
('Yukihiro Matsumoto', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'yukihiro@ifoverflow.com','secret',6),
('Rasmus Lerdorf', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'rasmus@ifoverflow.com','secret',7),
('Dennis Ritchie', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'dennis@ifoverflow.com','secret',8),
('James Gosling', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'james@ifoverflow.com','secret',9),
('Guido van Rossum', 'https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-7.png', 'guido@ifoverflow.com','secret',10);

INSERT INTO categorias(nome)
VALUES
('Artes e Humanidades'),
('Carros e Transportes'),
('Casa e Jardim'),
('Ciências Sociais'),
('Ciências e Matemática'),
('Comidas e Bebidas'),
('Tecnologia da Informação'),
('Ecologia e Meio Ambiente'),
('Eletrônicos'),
('Esportes'),
('Governo e Política'),
('Negócios Regionais'),
('Negócios e Finanças'),
('Saúde'),
('Sociedade e Cultura');

INSERT INTO tags(nome)
VALUES
('Python'),('Java'),('Estrutura de Dados'),('Banco de Dados'),
('MySQL'),('Cálculo'),('JavaScript'),('Engenharia de Software'),
('IA'),('Machine Learning'),('Deep Learning'),('Kotlin'),('PHP'),('TypeScript');

INSERT INTO perguntas(assunto,descricao,Categorias_id_categoria,Usuarios_id_usuario) 
VALUES
('O que usar no lugar do header php?','Estou com problema ao redirecionar com php, queria saber se existe alguma alternativa ao header',13,1),
('como popular bd em 5min?', 'to demorando', 4, 2),
('Como instalar um pacote manualmente em um projeto React Native?','Preciso instalar um pacote no meu projeto React Native, mas ao utilizar o comando npm para instalação:

npm install react-native-threatmetrix --save
Recebo o seguinte erro como resposta:

npm ERR! code ENOVERSIONS
npm ERR! No valid versions available for react-native-threatmetrix
Logo, parece não haver mais uma versão do pacote disponível. Mas tenho acesso ao projeto no GitHub (https://github.com/teopeurt/react-native-threatmetrix), e queria saber, se possível, como faço para instalá-lo manualmente.',7,3),
('pq python n tem ;?', 'tô curioso', 1, 5),
('Quantos MB tem um hello world em Java?', 'me veio essa dúvida antes de dormir', 2, 3),
('por onde começar a estudar estrutura de dados?', 'n quero reprovar na andrea', 3, 7),
('qual a importância do cálculo na programação?', 'pareço estar perdendo tempo com neves', 6, 1),
('Como faço uma IA com python?','Quero fazer uma skynet só',9,8),
('vale a pena aprender php em 2020?', 'vi no YouTube q já morreu', 13, 2),
('Como faz um diagrama de causa e efeito?','Se puderem mostrar exemplos...',8,9);

INSERT INTO tags_perguntas(tags_id_tag, perguntas_id_pergunta)
VALUES
(13,1),
(14,1),
(4,2),
(5,2),
(7,3),
(8,3),
(1,4),
(2,4),
(2,5),
(3,5),
(3,6),
(4,6),
(6,7),
(7,7),
(9,8),
(10,8),
(13,9),
(14,9),
(8,10),
(9,10);

INSERT INTO respostas(descricao,Usuarios_id_usuario,Perguntas_id_pergunta)
VALUES
('Faz um echo com um redirecionamento javascript',1,1),
('cria um bot', 2,2),
('pq guido quis assim', 5,3),
('50 MB aproximadamente', 3,4),
('fila circular', 7,5),
('matematica e programação são tico e teco', 1,6),
('estudando', 8,7),
('vale', 9,8),
('Baixa o pacote e põe na raiz do teu projeto',6,9),
('vai no google imagens, ta cheio de exemplos', 1, 10);


INSERT INTO comentarios_pergunta(descricao,Usuarios_id_usuario, Perguntas_id_pergunta) 
VALUES
('Problema na identação do código',10,10),
('Obrigado',1,1),
('Tá faltando o ;',2,2),
('Ainda não funcionou',3,3),
('Tenta reiniciar',2,2),
('Agora funcionou',2,2),
('Tá fora do for',5,5),
('Instala com o pip',10,10),
('Precisa calcular o x',7,7),
('Não entendi',8,8);

INSERT INTO comentarios_resposta(descricao, Usuarios_id_usuario, Respostas_id_resposta)
VALUES
('resposta horrível', 1,1),
('top', 2,2),
('vdd', 3,3),
('ajudou', 4,4),
('ai manja', 5,5),
('miseravel é um gênio', 6,6),
('bora estudar mais', 7,7),
('obg pela resposta', 8,8),
('mas e dps?', 9,9),
('ai sim hein cara', 10,10);

